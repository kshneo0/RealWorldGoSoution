
섹션 1: Beginner Solutions in Go - The Basics, Clients, and Servers

- Using the common I/O interfaces and the bytes and strings packages
- Working with directories, files, CSV format, and temporary files
- Working with text/template and html/templates

--------------------

sec1 ch2 Using the Common I/O Interfaces

- Common Go interfaces to deal with I/O and it's uses

--------------------

sec1 ch3 Using the Bytes and Strings Packages

- Working with data in memory and in the form of streams

- Number of useful helpers:
  - Convert between strings and byte types

- Creation of buffers:
  - Work with a number of common I/O interfaces

--------------------

sec1 ch4 Working with Directories and Files

- Using examples of I/O UTILS in a new way

--------------------

sec1 ch5 Working with the CSV format

- some common ways to get data into and out of the CSV format

--------------------

sec1 ch6 Working with Temporary Files

- Working with files without the overhead of dealing with name collision

--------------------

sec1 ch7 Working with Text/Template and HTML/Templates

- Go standard templates for both plain text and HTML

--------------------

Summary

- Common Go I/O interfaces
- Worked with file systems:
  - Temporary files
  - Templates
  - CSV files

--------------------

section 2 Command-Line Tools

- Command-line flags and Arguments
- Reading and setting environment Variables
- Configration using TOML, YAML, and JSON
- Unix pipe and Signals
- ANSI coloring Application

--------------------

sec2 ch8 Using Command-Line Flags

- flag package - Simple to add command-line flag arguments

go run sec2/flages/*.go -h
go run sec2/flages/*.go -s Go -isawesome -howawesome 10 -c 1,2,3

--------------------

sec2 ch9 Using Command-Line Arguments

- Other uses for flag arguments
- Constructing a command
- Flagsets and positional arguments passed into the application

go run sec2/cmdargs/*.go -h
go run sec2/cmdargs/*.go version
go run sec2/cmdargs/*.go greet
go run sec2/cmdargs/*.go greet reader
go run sec2/cmdargs/*.go greet reader -goodbye

--------------------

sec2 ch10 Reading and Setting Environment Variables

-Basic getting and setting of environment variables

go get github.com/kelseyhightower/envconfig
go get github.com/pkg/errors

--------------------

sec2 ch11 Configuration Using TOML, YAML, and JSON

- Configuration formats that Go has support for:
  - TOML
  - YAML
  - JSON

-Basic input and output using these formats

go get github.com/BurntSushi/toml@latest
go get gopkg.in/yaml.v2


--------------------

sec2 ch12 Working with Unix Pipes

- Taking an input on the left-hand side of a pipe
- Returning a list of words and their number of occurrences

echo "some string" | go run sec2/pipes/pipes.go
echo "test case test" | go run sec2/pipes/pipes.go

--------------------

sec2 ch13 Catching and Handling Signals

- Exploring the handling of signals - Use of a signal handling the Go routine

go run sec2/signals/signals.go
ps -ef | grep signals
kill -SIGTERM 9803

--------------------

sec2 ch14 An ANSI Coloring Application

- Basic coloring mechanism to color text red or plain

go get github.com/agtorre/gocolorize

--------------------

Summary

- Took in user input via coommand line
- Processing common data-types:
  - TOML
  - YAML
  - JSON

--------------------

section 3 Data Conversion and Composition

- Converting data types and interface casting
- Working with numeric data types using math and math/big
- Currency conversions and float64 considerations
- Using pointers and SQL NullTypes for encoding and Decoding
- Encoding and decoding Go data
- Struct tags and basic reflection in Go
- Implementing collections via closures

--------------------

sec3 ch15 Converting Data Types and Interface Casting

- Convenience functions:
  - Converting between numbers with casting
  - Converting between strings and other types
  - Converting between interfaces and types using reflection

--------------------

sec3 ch16 Working with Numeric Data Types using math and math/big

- Usage of the math package and math/big for fibonacci

- Focus on exposing more complex mathematical operations:
  - Pow
  - Sqrt
  - Cos

- math package operates on float64
- math/big package is for numbers that are too large to represent in a 64-bit

--------------------

sec3 ch17 Currency Conversions and float64 considerations

- Converting a string representation of currency into int64

Currency
- Working with currency is tricky
- Money as a float64 - rounding errors in calculations
- Cents - stored in as int64
- Money is usually represented in dollar form
- Treat it as a string and convert to pennies

--------------------

sec3 ch18 Using Pointers and SQL NullTypes for Encoding and Decoding

- When encoding/decoding into an object:
  - Strings default to empty string
  - Integers will default to 0
  - Struct tags such as JSON omit empty, 0 values
  
--------------------

sec3 ch19 Encoding and Decoding Go Data

- Encoding and decoding gob format and base64

--------------------

sec3 ch20 Struct Tags and Basic Reflection in Go

- The reflect package - interrogating and understanding interface objects
- Helper methods to look at structs, values, struct tags, and so on

--------------------

sec3 ch21 Implementing Collections Via Closures

- Functional constructs - map and filter make code appear more readable
- Basic examples of implementing collections using Go closures

--------------------

Summary

- Methods for casting and converting:
  - Go interfaces and data types

- Encoding strategies and some functional design patterns for Go

--------------------

section4 Error Handling in Go

- Handling errors and the error interface
- Using the pkg/errors package and wrapping errors
- Using the log package and understanding when to log errors
- Structured logging with the apex and logrus pacakges
- Logging with the context package
- Using package-level glob variables
- Catching panics for long running processes

--------------------

sec4 ch22 Handling Errors and the Error Interface

- Creation of basic errors
- Errors that have assigned values or types
- Custom error using a struct

--------------------

sec4 ch23 Using the pkg/errors Package and Wrapping Errors

- How to use the pkg/errors package to add annotation to errors

go get github.com/pkg/errors

--------------------
--------------------
--------------------
--------------------
--------------------
--------------------
--------------------
--------------------




sec4 ch24 Using the log Package and Understanding When to Log Errors
sec4 ch25 Structured Logging with the apex and logrus Packages
sec4 ch26 Logging with the context Package
sec4 ch27 Using Package-Level Global Variables
sec4 ch28 Catching Panics for Long Running Processes
sec4 ch29 The database/sql Package with MySQL
sec4 ch30 Executing a Database Transaction Interface
sec4 ch31 Connection Pooling, Rate Limiting, and Timeouts for SQL
sec4 ch32 Working with Redis
sec4 ch33 Using NoSQL with MongoDB and mgo
sec4 ch34 Creating Storage Interfaces for Data Portability
sec4 ch35 Initializing, Storing, and Passing httpClient structs
sec4 ch36 Writing a Client for a REST API
sec4 ch37 Executing Parallel and Async Client Requests
sec4 ch38 Making Use of OAuth2 Clients
sec4 ch39 Implementing an OAuth2 Token Storage Interface
sec4 ch40 Wrapping a Client in Added Functionality and Function Composition
sec4 ch41 Understanding GRPC Clients
sec4 ch42 Working with Web Handlers, Requests, and ResponseWriters
sec4 ch43 Using Structs and Closures for Stateful Handlers
sec4 ch44 Validating Input for Go structs and User Inputs
sec4 ch45 Rendering and Content Negotiation
sec4 ch46 Implementing and Using Middleware
sec4 ch47 Building a Reverse Proxy Application
sec4 ch48 Exporting GRPC as a JSON API
sec 2: Advanced Solutions in Go - Testing and Distributed Systems
sec2 ch49 The Course Overview
sec2 ch50 Mocking Using the Standard Library
sec2 ch51 Using the mockgen Package
sec2 ch52 Using Table-Driven Tests to Improve Coverage
sec2 ch53 Using Third-Party Testing Tools
sec2 ch54 Practical Fuzzing
sec2 ch55 Behavior Testing Using Go
sec2 ch56 Using channels and the select Statement
sec2 ch57 Performing async Operations withsyncWaitGroup
sec2 ch58 Using Atomic Operations and mutex
sec2 ch59 Using the context Package
sec2 ch60 Executing State Management for Channels
sec2 ch61 Using the Worker Pool Design Pattern
sec2 ch62 Using Workers to Create Pipelines
sec2 ch63 Using Service Discovery with Consul
sec2 ch64 Implementing Basic Consensus Using Raft
sec2 ch65 Using Containerization with Docker
sec2 ch66 Orchestration and Deployment Strategies
sec2 ch67 Monitoring Applications
sec2 ch68 Collecting Metrics
sec2 ch69 goflow for Dataflow Programming
sec2 ch70 Reactive Programming with RxGo
sec2 ch71 Using Kafka with Sarama
sec2 ch72 Using async Producers with Kafka
sec2 ch73 Connecting Kafka to goflow
sec2 ch74 Defining a GraphQL Server in Go
sec2 ch75 Go Programming on Lambda with Apex
sec2 ch76 Apex Serverless Logging and Metrics
sec2 ch77 Google App Engine with Go
sec2 ch78 Working with Firebase Using zabawaba99/firego
sec2 ch79 Using the pprof Tool
sec2 ch80 Benchmarking and Finding Bottlenecks
sec2 ch81 Memory Allocation and Heap Management
sec2 ch82 Vendoring and Project Layout
sec2 ch83 Using fasthttprouter and fasthttp
